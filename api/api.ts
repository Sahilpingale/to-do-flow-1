/* tslint:disable */
/* eslint-disable */
/**
 * Your API Name
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthLogoutPost200Response
 */
export interface AuthLogoutPost200Response {
    /**
     * Logout message
     * @type {string}
     * @memberof AuthLogoutPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AuthRefreshTokenPost200Response
 */
export interface AuthRefreshTokenPost200Response {
    /**
     * New access token
     * @type {string}
     * @memberof AuthRefreshTokenPost200Response
     */
    'accessToken'?: string;
    /**
     * New refresh token (if rotated)
     * @type {string}
     * @memberof AuthRefreshTokenPost200Response
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface ICreateProjectRequest
 */
export interface ICreateProjectRequest {
    /**
     * Name of the project
     * @type {string}
     * @memberof ICreateProjectRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface IErrorResponse
 */
export interface IErrorResponse {
    /**
     * Error message
     * @type {string}
     * @memberof IErrorResponse
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface IGenerateTaskSuggestionsRequest
 */
export interface IGenerateTaskSuggestionsRequest {
    /**
     * The ID of the project to generate suggestions for
     * @type {string}
     * @memberof IGenerateTaskSuggestionsRequest
     */
    'projectId': string;
    /**
     * Natural language query describing the desired tasks
     * @type {string}
     * @memberof IGenerateTaskSuggestionsRequest
     */
    'query': string;
    /**
     * Array of existing task nodes that should be considered when generating suggestions
     * @type {Array<ITaskNode>}
     * @memberof IGenerateTaskSuggestionsRequest
     */
    'associatedNodes': Array<ITaskNode>;
}
/**
 * 
 * @export
 * @interface IGenerateTaskSuggestionsResponse
 */
export interface IGenerateTaskSuggestionsResponse {
    /**
     * Array of suggested task nodes
     * @type {Array<ITaskNode>}
     * @memberof IGenerateTaskSuggestionsResponse
     */
    'suggestions': Array<ITaskNode>;
    /**
     * Optional message about the generation process
     * @type {string}
     * @memberof IGenerateTaskSuggestionsResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ILoginRequest
 */
export interface ILoginRequest {
    /**
     * User\'s email address
     * @type {string}
     * @memberof ILoginRequest
     */
    'email': string;
    /**
     * User\'s display name
     * @type {string}
     * @memberof ILoginRequest
     */
    'displayName': string;
    /**
     * URL to user\'s profile photo
     * @type {string}
     * @memberof ILoginRequest
     */
    'photoURL'?: string;
    /**
     * User\'s phone number
     * @type {string}
     * @memberof ILoginRequest
     */
    'phoneNumber'?: string;
    /**
     * User\'s unique identifier
     * @type {string}
     * @memberof ILoginRequest
     */
    'uid': string;
    /**
     * Refresh token
     * @type {string}
     * @memberof ILoginRequest
     */
    'refreshToken'?: string;
    /**
     * Access token
     * @type {string}
     * @memberof ILoginRequest
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface ILoginResponse
 */
export interface ILoginResponse {
    /**
     * User\'s ID in the system
     * @type {string}
     * @memberof ILoginResponse
     */
    'id': string;
    /**
     * User\'s email address
     * @type {string}
     * @memberof ILoginResponse
     */
    'email': string;
    /**
     * Account creation timestamp
     * @type {string}
     * @memberof ILoginResponse
     */
    'createdAt': string;
    /**
     * Account last update timestamp
     * @type {string}
     * @memberof ILoginResponse
     */
    'updatedAt': string;
    /**
     * Access token
     * @type {string}
     * @memberof ILoginResponse
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const INodeType = {
    Task: 'TASK'
} as const;

export type INodeType = typeof INodeType[keyof typeof INodeType];


/**
 * 
 * @export
 * @interface IProject
 */
export interface IProject {
    /**
     * Unique identifier for the project
     * @type {string}
     * @memberof IProject
     */
    'id'?: string;
    /**
     * Name of the project
     * @type {string}
     * @memberof IProject
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IProject
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IProject
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<ITaskNode>}
     * @memberof IProject
     */
    'nodes'?: Array<ITaskNode>;
    /**
     * 
     * @type {Array<ITaskEdge>}
     * @memberof IProject
     */
    'edges'?: Array<ITaskEdge>;
}
/**
 * 
 * @export
 * @interface IProjectResponse
 */
export interface IProjectResponse {
    /**
     * Unique identifier for the project
     * @type {string}
     * @memberof IProjectResponse
     */
    'id'?: string;
    /**
     * Name of the project
     * @type {string}
     * @memberof IProjectResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IProjectResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IProjectResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<ITaskNode>}
     * @memberof IProjectResponse
     */
    'nodes'?: Array<ITaskNode>;
    /**
     * 
     * @type {Array<ITaskEdge>}
     * @memberof IProjectResponse
     */
    'edges'?: Array<ITaskEdge>;
}
/**
 * 
 * @export
 * @interface ITaskEdge
 */
export interface ITaskEdge {
    /**
     * 
     * @type {string}
     * @memberof ITaskEdge
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ITaskEdge
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof ITaskEdge
     */
    'target'?: string;
    /**
     * 
     * @type {INodeType}
     * @memberof ITaskEdge
     */
    'type'?: INodeType;
    /**
     * 
     * @type {boolean}
     * @memberof ITaskEdge
     */
    'animated'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ITaskEdge
     */
    'deletable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ITaskEdge
     */
    'reconnectable'?: boolean;
}


/**
 * 
 * @export
 * @interface ITaskNode
 */
export interface ITaskNode {
    /**
     * 
     * @type {string}
     * @memberof ITaskNode
     */
    'id'?: string;
    /**
     * 
     * @type {ITaskNodeData}
     * @memberof ITaskNode
     */
    'data'?: ITaskNodeData;
    /**
     * 
     * @type {ITaskNodePosition}
     * @memberof ITaskNode
     */
    'position'?: ITaskNodePosition;
    /**
     * 
     * @type {ITaskNodeMeasured}
     * @memberof ITaskNode
     */
    'measured'?: ITaskNodeMeasured;
    /**
     * 
     * @type {INodeType}
     * @memberof ITaskNode
     */
    'type'?: INodeType;
}


/**
 * 
 * @export
 * @interface ITaskNodeData
 */
export interface ITaskNodeData {
    /**
     * 
     * @type {string}
     * @memberof ITaskNodeData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ITaskNodeData
     */
    'description'?: string;
    /**
     * 
     * @type {ITaskStatus}
     * @memberof ITaskNodeData
     */
    'status'?: ITaskStatus;
}


/**
 * 
 * @export
 * @interface ITaskNodeMeasured
 */
export interface ITaskNodeMeasured {
    /**
     * 
     * @type {number}
     * @memberof ITaskNodeMeasured
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ITaskNodeMeasured
     */
    'height'?: number;
}
/**
 * 
 * @export
 * @interface ITaskNodePosition
 */
export interface ITaskNodePosition {
    /**
     * 
     * @type {number}
     * @memberof ITaskNodePosition
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof ITaskNodePosition
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ITaskStatus = {
    Todo: 'TODO',
    InProgress: 'IN_PROGRESS',
    Done: 'DONE'
} as const;

export type ITaskStatus = typeof ITaskStatus[keyof typeof ITaskStatus];


/**
 * 
 * @export
 * @interface IUpdateProjectRequest
 */
export interface IUpdateProjectRequest {
    /**
     * 
     * @type {Array<ITaskNode>}
     * @memberof IUpdateProjectRequest
     */
    'nodesToUpdate'?: Array<ITaskNode>;
    /**
     * 
     * @type {string}
     * @memberof IUpdateProjectRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<ITaskNode>}
     * @memberof IUpdateProjectRequest
     */
    'nodesToAdd'?: Array<ITaskNode>;
    /**
     * 
     * @type {Array<IUpdateProjectRequestNodesToRemoveInner>}
     * @memberof IUpdateProjectRequest
     */
    'nodesToRemove'?: Array<IUpdateProjectRequestNodesToRemoveInner>;
    /**
     * 
     * @type {Array<ITaskEdge>}
     * @memberof IUpdateProjectRequest
     */
    'edgesToAdd'?: Array<ITaskEdge>;
    /**
     * 
     * @type {Array<IUpdateProjectRequestNodesToRemoveInner>}
     * @memberof IUpdateProjectRequest
     */
    'edgesToRemove'?: Array<IUpdateProjectRequestNodesToRemoveInner>;
}
/**
 * 
 * @export
 * @interface IUpdateProjectRequestNodesToRemoveInner
 */
export interface IUpdateProjectRequestNodesToRemoveInner {
    /**
     * 
     * @type {string}
     * @memberof IUpdateProjectRequestNodesToRemoveInner
     */
    'id'?: string;
}

/**
 * AIToDoFlow - axios parameter creator
 * @export
 */
export const AIToDoFlowAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Uses AI to generate task suggestions based on a natural language query and existing project context.
         * @summary Generate AI-powered task suggestions
         * @param {IGenerateTaskSuggestionsRequest} iGenerateTaskSuggestionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiGenerateTaskSuggestionsPost: async (iGenerateTaskSuggestionsRequest: IGenerateTaskSuggestionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iGenerateTaskSuggestionsRequest' is not null or undefined
            assertParamExists('aiGenerateTaskSuggestionsPost', 'iGenerateTaskSuggestionsRequest', iGenerateTaskSuggestionsRequest)
            const localVarPath = `/ai/generate-task-suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iGenerateTaskSuggestionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AIToDoFlow - functional programming interface
 * @export
 */
export const AIToDoFlowFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AIToDoFlowAxiosParamCreator(configuration)
    return {
        /**
         * Uses AI to generate task suggestions based on a natural language query and existing project context.
         * @summary Generate AI-powered task suggestions
         * @param {IGenerateTaskSuggestionsRequest} iGenerateTaskSuggestionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiGenerateTaskSuggestionsPost(iGenerateTaskSuggestionsRequest: IGenerateTaskSuggestionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGenerateTaskSuggestionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiGenerateTaskSuggestionsPost(iGenerateTaskSuggestionsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIToDoFlow.aiGenerateTaskSuggestionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AIToDoFlow - factory interface
 * @export
 */
export const AIToDoFlowFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AIToDoFlowFp(configuration)
    return {
        /**
         * Uses AI to generate task suggestions based on a natural language query and existing project context.
         * @summary Generate AI-powered task suggestions
         * @param {IGenerateTaskSuggestionsRequest} iGenerateTaskSuggestionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiGenerateTaskSuggestionsPost(iGenerateTaskSuggestionsRequest: IGenerateTaskSuggestionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<IGenerateTaskSuggestionsResponse> {
            return localVarFp.aiGenerateTaskSuggestionsPost(iGenerateTaskSuggestionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AIToDoFlow - object-oriented interface
 * @export
 * @class AIToDoFlow
 * @extends {BaseAPI}
 */
export class AIToDoFlow extends BaseAPI {
    /**
     * Uses AI to generate task suggestions based on a natural language query and existing project context.
     * @summary Generate AI-powered task suggestions
     * @param {IGenerateTaskSuggestionsRequest} iGenerateTaskSuggestionsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIToDoFlow
     */
    public aiGenerateTaskSuggestionsPost(iGenerateTaskSuggestionsRequest: IGenerateTaskSuggestionsRequest, options?: RawAxiosRequestConfig) {
        return AIToDoFlowFp(this.configuration).aiGenerateTaskSuggestionsPost(iGenerateTaskSuggestionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenticationToDoFlow - axios parameter creator
 * @export
 */
export const AuthenticationToDoFlowAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login or register a user
         * @param {ILoginRequest} iLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (iLoginRequest: ILoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iLoginRequest' is not null or undefined
            assertParamExists('authLoginPost', 'iLoginRequest', iLoginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh access token using refresh token from HTTP-only cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshTokenPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationToDoFlow - functional programming interface
 * @export
 */
export const AuthenticationToDoFlowFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationToDoFlowAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login or register a user
         * @param {ILoginRequest} iLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(iLoginRequest: ILoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ILoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(iLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationToDoFlow.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthLogoutPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationToDoFlow.authLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh access token using refresh token from HTTP-only cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshTokenPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthRefreshTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshTokenPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationToDoFlow.authRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationToDoFlow - factory interface
 * @export
 */
export const AuthenticationToDoFlowFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationToDoFlowFp(configuration)
    return {
        /**
         * 
         * @summary Login or register a user
         * @param {ILoginRequest} iLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(iLoginRequest: ILoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<ILoginResponse> {
            return localVarFp.authLoginPost(iLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<AuthLogoutPost200Response> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh access token using refresh token from HTTP-only cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshTokenPost(options?: RawAxiosRequestConfig): AxiosPromise<AuthRefreshTokenPost200Response> {
            return localVarFp.authRefreshTokenPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationToDoFlow - object-oriented interface
 * @export
 * @class AuthenticationToDoFlow
 * @extends {BaseAPI}
 */
export class AuthenticationToDoFlow extends BaseAPI {
    /**
     * 
     * @summary Login or register a user
     * @param {ILoginRequest} iLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationToDoFlow
     */
    public authLoginPost(iLoginRequest: ILoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationToDoFlowFp(this.configuration).authLoginPost(iLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationToDoFlow
     */
    public authLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthenticationToDoFlowFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh access token using refresh token from HTTP-only cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationToDoFlow
     */
    public authRefreshTokenPost(options?: RawAxiosRequestConfig) {
        return AuthenticationToDoFlowFp(this.configuration).authRefreshTokenPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectsToDoFlow - axios parameter creator
 * @export
 */
export const ProjectsToDoFlowAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all projects for the authenticated user.
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a project by ID.
         * @summary Delete a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdDelete', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a project with its nodes and edges by ID.
         * @summary Get a project by ID
         * @param {string} id The project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdGet', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a project\'s nodes and edges.
         * @summary Edit a project
         * @param {string} id The project ID
         * @param {IUpdateProjectRequest} iUpdateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdPatch: async (id: string, iUpdateProjectRequest: IUpdateProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdPatch', 'id', id)
            // verify required parameter 'iUpdateProjectRequest' is not null or undefined
            assertParamExists('projectsIdPatch', 'iUpdateProjectRequest', iUpdateProjectRequest)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUpdateProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new project with the given name.
         * @summary Create a new project
         * @param {ICreateProjectRequest} iCreateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost: async (iCreateProjectRequest: ICreateProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iCreateProjectRequest' is not null or undefined
            assertParamExists('projectsPost', 'iCreateProjectRequest', iCreateProjectRequest)
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iCreateProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsToDoFlow - functional programming interface
 * @export
 */
export const ProjectsToDoFlowFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsToDoFlowAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all projects for the authenticated user.
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IProjectResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a project by ID.
         * @summary Delete a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a project with its nodes and edges by ID.
         * @summary Get a project by ID
         * @param {string} id The project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a project\'s nodes and edges.
         * @summary Edit a project
         * @param {string} id The project ID
         * @param {IUpdateProjectRequest} iUpdateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdPatch(id: string, iUpdateProjectRequest: IUpdateProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdPatch(id, iUpdateProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new project with the given name.
         * @summary Create a new project
         * @param {ICreateProjectRequest} iCreateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsPost(iCreateProjectRequest: ICreateProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsPost(iCreateProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectsToDoFlow - factory interface
 * @export
 */
export const ProjectsToDoFlowFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsToDoFlowFp(configuration)
    return {
        /**
         * Retrieves a list of all projects for the authenticated user.
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<IProjectResponse>> {
            return localVarFp.projectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a project by ID.
         * @summary Delete a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a project with its nodes and edges by ID.
         * @summary Get a project by ID
         * @param {string} id The project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<IProjectResponse> {
            return localVarFp.projectsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a project\'s nodes and edges.
         * @summary Edit a project
         * @param {string} id The project ID
         * @param {IUpdateProjectRequest} iUpdateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdPatch(id: string, iUpdateProjectRequest: IUpdateProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<IProjectResponse> {
            return localVarFp.projectsIdPatch(id, iUpdateProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new project with the given name.
         * @summary Create a new project
         * @param {ICreateProjectRequest} iCreateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost(iCreateProjectRequest: ICreateProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<IProjectResponse> {
            return localVarFp.projectsPost(iCreateProjectRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsToDoFlow - object-oriented interface
 * @export
 * @class ProjectsToDoFlow
 * @extends {BaseAPI}
 */
export class ProjectsToDoFlow extends BaseAPI {
    /**
     * Retrieves a list of all projects for the authenticated user.
     * @summary Get all projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsGet(options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a project by ID.
     * @summary Delete a project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a project with its nodes and edges by ID.
     * @summary Get a project by ID
     * @param {string} id The project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a project\'s nodes and edges.
     * @summary Edit a project
     * @param {string} id The project ID
     * @param {IUpdateProjectRequest} iUpdateProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsIdPatch(id: string, iUpdateProjectRequest: IUpdateProjectRequest, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsIdPatch(id, iUpdateProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new project with the given name.
     * @summary Create a new project
     * @param {ICreateProjectRequest} iCreateProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsPost(iCreateProjectRequest: ICreateProjectRequest, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsPost(iCreateProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



