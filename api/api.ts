/* tslint:disable */
/* eslint-disable */
/**
 * Your API Name
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const NodeType = {
    Task: 'TASK'
} as const;

export type NodeType = typeof NodeType[keyof typeof NodeType];


/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * Unique identifier for the project
     * @type {string}
     * @memberof Project
     */
    'id'?: string;
    /**
     * Name of the project
     * @type {string}
     * @memberof Project
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<TaskNode>}
     * @memberof Project
     */
    'nodes'?: Array<TaskNode>;
    /**
     * 
     * @type {Array<TaskEdge>}
     * @memberof Project
     */
    'edges'?: Array<TaskEdge>;
}
/**
 * 
 * @export
 * @interface ProjectsIdPatchRequest
 */
export interface ProjectsIdPatchRequest {
    /**
     * 
     * @type {Array<ProjectsIdPatchRequestNodesToUpdateInner>}
     * @memberof ProjectsIdPatchRequest
     */
    'nodesToUpdate'?: Array<ProjectsIdPatchRequestNodesToUpdateInner>;
    /**
     * 
     * @type {Array<ProjectsIdPatchRequestNodesToUpdateInner>}
     * @memberof ProjectsIdPatchRequest
     */
    'nodesToAdd'?: Array<ProjectsIdPatchRequestNodesToUpdateInner>;
    /**
     * 
     * @type {Array<ProjectsIdPatchRequestNodesToRemoveInner>}
     * @memberof ProjectsIdPatchRequest
     */
    'nodesToRemove'?: Array<ProjectsIdPatchRequestNodesToRemoveInner>;
    /**
     * 
     * @type {Array<ProjectsIdPatchRequestEdgesToAddInner>}
     * @memberof ProjectsIdPatchRequest
     */
    'edgesToAdd'?: Array<ProjectsIdPatchRequestEdgesToAddInner>;
    /**
     * 
     * @type {Array<ProjectsIdPatchRequestNodesToRemoveInner>}
     * @memberof ProjectsIdPatchRequest
     */
    'edgesToRemove'?: Array<ProjectsIdPatchRequestNodesToRemoveInner>;
}
/**
 * 
 * @export
 * @interface ProjectsIdPatchRequestEdgesToAddInner
 */
export interface ProjectsIdPatchRequestEdgesToAddInner {
    /**
     * 
     * @type {string}
     * @memberof ProjectsIdPatchRequestEdgesToAddInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectsIdPatchRequestEdgesToAddInner
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectsIdPatchRequestEdgesToAddInner
     */
    'target'?: string;
}
/**
 * 
 * @export
 * @interface ProjectsIdPatchRequestNodesToRemoveInner
 */
export interface ProjectsIdPatchRequestNodesToRemoveInner {
    /**
     * 
     * @type {string}
     * @memberof ProjectsIdPatchRequestNodesToRemoveInner
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProjectsIdPatchRequestNodesToUpdateInner
 */
export interface ProjectsIdPatchRequestNodesToUpdateInner {
    /**
     * 
     * @type {string}
     * @memberof ProjectsIdPatchRequestNodesToUpdateInner
     */
    'id'?: string;
    /**
     * 
     * @type {object}
     * @memberof ProjectsIdPatchRequestNodesToUpdateInner
     */
    'data'?: object;
    /**
     * 
     * @type {object}
     * @memberof ProjectsIdPatchRequestNodesToUpdateInner
     */
    'position'?: object;
    /**
     * 
     * @type {string}
     * @memberof ProjectsIdPatchRequestNodesToUpdateInner
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ProjectsPostRequest
 */
export interface ProjectsPostRequest {
    /**
     * Name of the project
     * @type {string}
     * @memberof ProjectsPostRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TaskEdge
 */
export interface TaskEdge {
    /**
     * 
     * @type {string}
     * @memberof TaskEdge
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskEdge
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskEdge
     */
    'target'?: string;
    /**
     * 
     * @type {NodeType}
     * @memberof TaskEdge
     */
    'type'?: NodeType;
    /**
     * 
     * @type {boolean}
     * @memberof TaskEdge
     */
    'animated'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskEdge
     */
    'deletable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskEdge
     */
    'reconnectable'?: boolean;
}


/**
 * 
 * @export
 * @interface TaskNode
 */
export interface TaskNode {
    /**
     * 
     * @type {string}
     * @memberof TaskNode
     */
    'id'?: string;
    /**
     * 
     * @type {TaskNodeData}
     * @memberof TaskNode
     */
    'data'?: TaskNodeData;
    /**
     * 
     * @type {TaskNodePosition}
     * @memberof TaskNode
     */
    'position'?: TaskNodePosition;
    /**
     * 
     * @type {NodeType}
     * @memberof TaskNode
     */
    'type'?: NodeType;
}


/**
 * 
 * @export
 * @interface TaskNodeData
 */
export interface TaskNodeData {
    /**
     * 
     * @type {string}
     * @memberof TaskNodeData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskNodeData
     */
    'description'?: string;
    /**
     * 
     * @type {TaskStatus}
     * @memberof TaskNodeData
     */
    'status'?: TaskStatus;
}


/**
 * 
 * @export
 * @interface TaskNodePosition
 */
export interface TaskNodePosition {
    /**
     * 
     * @type {number}
     * @memberof TaskNodePosition
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskNodePosition
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TaskStatus = {
    Todo: 'TODO',
    InProgress: 'IN_PROGRESS',
    Done: 'DONE'
} as const;

export type TaskStatus = typeof TaskStatus[keyof typeof TaskStatus];



/**
 * ProjectsToDoFlow - axios parameter creator
 * @export
 */
export const ProjectsToDoFlowAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all projects with their associated nodes and edges.
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a project by ID.
         * @summary Delete a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdDelete', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a project with its nodes and edges by ID.
         * @summary Get a project by ID
         * @param {string} id The project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdGet', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a project\'s nodes and edges.
         * @summary Edit a project
         * @param {string} id The project ID
         * @param {ProjectsIdPatchRequest} projectsIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdPatch: async (id: string, projectsIdPatchRequest: ProjectsIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdPatch', 'id', id)
            // verify required parameter 'projectsIdPatchRequest' is not null or undefined
            assertParamExists('projectsIdPatch', 'projectsIdPatchRequest', projectsIdPatchRequest)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectsIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new project with the given name.
         * @summary Create a new project
         * @param {ProjectsPostRequest} projectsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost: async (projectsPostRequest: ProjectsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectsPostRequest' is not null or undefined
            assertParamExists('projectsPost', 'projectsPostRequest', projectsPostRequest)
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsToDoFlow - functional programming interface
 * @export
 */
export const ProjectsToDoFlowFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsToDoFlowAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all projects with their associated nodes and edges.
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a project by ID.
         * @summary Delete a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a project with its nodes and edges by ID.
         * @summary Get a project by ID
         * @param {string} id The project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a project\'s nodes and edges.
         * @summary Edit a project
         * @param {string} id The project ID
         * @param {ProjectsIdPatchRequest} projectsIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdPatch(id: string, projectsIdPatchRequest: ProjectsIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdPatch(id, projectsIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new project with the given name.
         * @summary Create a new project
         * @param {ProjectsPostRequest} projectsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsPost(projectsPostRequest: ProjectsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsPost(projectsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsToDoFlow.projectsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectsToDoFlow - factory interface
 * @export
 */
export const ProjectsToDoFlowFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsToDoFlowFp(configuration)
    return {
        /**
         * Retrieves a list of all projects with their associated nodes and edges.
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Project>> {
            return localVarFp.projectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a project by ID.
         * @summary Delete a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a project with its nodes and edges by ID.
         * @summary Get a project by ID
         * @param {string} id The project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.projectsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a project\'s nodes and edges.
         * @summary Edit a project
         * @param {string} id The project ID
         * @param {ProjectsIdPatchRequest} projectsIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdPatch(id: string, projectsIdPatchRequest: ProjectsIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.projectsIdPatch(id, projectsIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new project with the given name.
         * @summary Create a new project
         * @param {ProjectsPostRequest} projectsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost(projectsPostRequest: ProjectsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.projectsPost(projectsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsToDoFlow - object-oriented interface
 * @export
 * @class ProjectsToDoFlow
 * @extends {BaseAPI}
 */
export class ProjectsToDoFlow extends BaseAPI {
    /**
     * Retrieves a list of all projects with their associated nodes and edges.
     * @summary Get all projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsGet(options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a project by ID.
     * @summary Delete a project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a project with its nodes and edges by ID.
     * @summary Get a project by ID
     * @param {string} id The project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a project\'s nodes and edges.
     * @summary Edit a project
     * @param {string} id The project ID
     * @param {ProjectsIdPatchRequest} projectsIdPatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsIdPatch(id: string, projectsIdPatchRequest: ProjectsIdPatchRequest, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsIdPatch(id, projectsIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new project with the given name.
     * @summary Create a new project
     * @param {ProjectsPostRequest} projectsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsToDoFlow
     */
    public projectsPost(projectsPostRequest: ProjectsPostRequest, options?: RawAxiosRequestConfig) {
        return ProjectsToDoFlowFp(this.configuration).projectsPost(projectsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



